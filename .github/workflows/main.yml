# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow that checks for security issues using
# the GCP IAC Validation Infrastructure as Code Scan Action on
# the IaC files present in the repository.
# The results are uploaded to GitHub Security Code Scanning

name: IAC Scan

on: [push]

jobs:
  IAC-Infra_Synthesize_Job:
    runs-on: ubuntu-latest
    name: SBOM_Generate_Action
    permissions:
      contents: read
    steps:
     - name: Set up GCS credentials
       run: echo "${{ secrets.GCS_CRDENTIALS }}" > gcs-credentials.json
     - name: HashiCorp - Setup Terraform
       # You may pin to the exact commit or the version.
       # uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
       uses: hashicorp/setup-terraform@v2.0.3
     - name: Terraform init Verify
       run : terraform init 
     - name: Terraform Plan Generation  
       run : terraform plan -var-file=../environments/non-prod/terraform.tfvars
     - name: IAC Validtion Step
       id: validate_iac
       uses: sanyam803/SCC-Left-Shift-Security@v1.1
       with:
          gcs_credentials: ${{ secrets.GCS_CRDENTIALS }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          planFilePath: "IAC/myplanFile.plan"
     - name: Upload SARIF file
       uses: github/codeql-action/upload-sarif@v2
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed.
        # And alternative it to add `continue-on-error: true` to the previous step
       if: success() || failure()
       with:
          # The SARIF Log file name is configurable on scan action
          # therefore the file name is best read from the steps output
          sarif_file: ${{ steps.iac-scan.outputs.iac_scan_result_sarif_path }}    
          
          
       
